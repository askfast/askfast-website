article#sub-fast-start(ng-show='subView.faststart')

  #row1.container-fluid.container-content
    .row
      .img-holder.col-md-6.col-md-push-6
        img.img-responsive(ng-src='../images/stock-servers.png', alt='Image of servers')
      .content-holder.col-md-6.col-md-pull-6
        h1.text-pink {{ui.pages.developers.faststart.row1.title}}
        p(ng-repeat='content in ui.pages.developers.faststart.row1.content') {{content}}
        //p
        //  a.btn.btn-primary(href='#/register') {{ui.pages.developers.faststart.row1.cta}}

  #row2.container-fluid.container-content.container-dark
    .row
      .img-holder.col-md-6
        img.img-responsive(ng-src='../images/stock-ballons.png', alt='Image of dialog ballons')
      .content-holder.col-md-6
        h1 {{ui.pages.developers.faststart.row2.title}}
        p(ng-repeat='content in ui.pages.developers.faststart.row2.content') {{content}}
        //p
        //  a.btn.btn-primary(href='#/register') {{ui.pages.developers.faststart.row2.cta}}

  #row3.container-fluid.container-content
    .row
      .img-holder.col-md-6.col-md-push-6
        img.img-responsive(ng-src='../images/stock-construction.png', alt='Image of construction')
      .content-holder.col-md-6.col-md-pull-6
        h1.text-pink {{ui.pages.developers.faststart.row3.title}}
        p(ng-repeat='content in ui.pages.developers.faststart.row3.content') {{content}}
        ul.bullets
          li(ng-repeat='item in ui.pages.developers.faststart.row3.list') {{item}}
        //p
        //  a.btn.btn-primary(href='#/register') {{ui.pages.developers.faststart.row3.cta}}

  #row4.container-fluid.container-content.container-dark
    .row
      .img-holder.col-md-6
        img.img-responsive(ng-src='../images/stock-askfast-box.png', alt='Image of ASK-Fast boxes')
      .content-holder.col-md-6
        h1 {{ui.pages.developers.faststart.row4.title}}
        p(ng-repeat='content in ui.pages.developers.faststart.row4.content') {{content}}
        p
          //a.btn.btn-primary(href='#/register') {{ui.pages.developers.faststart.row4.cta}}
          //a.btn.btn-cancel(ng-click='setSubView("devmods")')
          //  | {{ui.pages.developers.faststart.row4.cancel}}


article#sub-devmods(ng-show='subView.devmods')

  .container-fluid.container-content.container-dark
    .row
      .content-holder.col-md-6
        h1 {{ui.pages.developers.devmods.title}}
        p(ng-repeat='content in ui.pages.developers.devmods.content') {{content}}
        ul
          li(ng-repeat='item in ui.pages.developers.devmods.list') {{item}}
      .img-holder.col-md-6
        img.img-responsive(ng-src='../images/stock-developer-man.png', alt='Image of developer')

  .container-fluid.container-content
    .row
      .col-md-5

        .dev-mod-select
          h2 DevMods
          select(ng-model='mod', ng-change='switchDevMod(mod)', ng-init='mod="verify"')
            option(value='verify') Verify Me
            option(value='broadcast') Broadcast
            option(value='tracking') Number Tracking
            option(value='click') Click2Call

        .verify
          .__fixed-left
            a.sprite.verify-icon(ng-click='switchDevMod("verify")',
            class='{{(devModView.verify) && "active"}}') verify
            a.sprite.broadcast-icon(ng-click='switchDevMod("broadcast")',
            class='{{(devModView.broadcast) && "active"}}') broadcast
            a.sprite.tracking-icon(ng-click='switchDevMod("tracking")',
            class='{{(devModView.tracking) && "active"}}') Number traking
            a.sprite.click-icon(ng-click='switchDevMod("click")',
            class='{{(devModView.click) && "active"}}') click 2 call

      .col-md-7(ng-show='devModView.verify')
        h1.text-pink VerifyMe
        p.
          VerifyMe is used for verifying E-mail, Mobile and Landline phone of a user or a
          system. It has two processes (Initiate and Verify) to understand if the number is
          which a REST API imlemented for these two processes.
        h3.text-pink Initiate
        p.
          This REST call initiates a dialog to push (by text or audio) the random
          verification code to the phonenumber specified
        pre
          span.text-white POST&nbsp;
          | &lt;hostname&gt;
          span.text-white /products/verifyme/initiate
          br
          span.text-white {
          br
          |   "verificationMedium"
          span.text-white :
          | &nbsp;"SMS | Call | Email | Auto"
          span.text-white ,
          br
          |   "verificationInfo"
          span.text-white : {
          br
          |     "address"
          span.text-white :
          | &nbsp;&lt;address&gt;
          span.text-white ,
          br
          |     "message"
          span.text-white :
          | "&nbsp;&lt;message&gt;"
          span.text-white ,
          br
          |     "subject"
          span.text-white :
          | "&nbsp;&lt;subject&gt;"
          span.text-white ,
          br
          |     "senderName"
          span.text-white :
          | "&nbsp;&lt;sender name&gt;"
          br
          span.text-white    },
          br
          |   "sessionTimeoutInSecs"
          span.text-white :
          | &nbsp;&lt;timeout&gt;
          span.text-white ,
          br
          |   "verificationCodeLength"
          span.text-white :
          | &nbsp;&lt;codeLength&gt;
          br
          span.text-white }
        dl
          dt.text-pink verificationMedium
          dd.
            medium used to send/play the verification code. Auto is an option which
            automatically predicts the medium based on the address field:

          dt.text-pink address
          dd
            | medium used to send/play the verification code.
            br
            | Mobile number, an SMS triggered.
            br
            | Fixedline number, a automated phone call is triggered.
            br
            | For anything else, an Email is triggered.

          dt.text-pink message
          dd
            | This is parsed for a maching “[code]”. If found [code] is replaced by the random
            | code that is generated.
            br
            | If not, the message is appended with “Code: ”. For a Phone call, this audio
            | URL is played before playing out the random code.

          dt.text-pink sessionTimeoutInSecs
          dd.
            This is the maximum time until which a verify API call is valid. Default value is
            180s, incase this field is left empty/null.

          dt.text-pink verificationCodeLength
          dd.
            This is the length of the random number that has to be generated. Default value
            is 4, incase this field is left empty/null.
        pre
          span.text-white POST&nbsp;
          | &lt;hostname&gt;
          span.text-white /products/verifyme/initiate
          br
          span.text-white {
          br
          |   "verificationMedium"
          span.text-white :
          | &nbsp;"SMS"
          span.text-white ,
          br
          |   "verificationInfo"
          span.text-white : {
          br
          |     "address"
          span.text-white :
          | &nbsp;&lt;address&gt;
          span.text-white ,
          br
          |     "message"
          span.text-white :
          | "Following is your verification code: [code]"
          span.text-white ,
          br
          |     "subject"
          span.text-white :
          | "oneline verification"
          span.text-white ,
          br
          |     "senderName"
          span.text-white :
          | "online"
          br
          span.text-white    }
          br
          span.text-white }
        h3.text-pink Response
        p
          | The following response is generated on success. The
          span.text-pink &nbsp;initiateResponse&nbsp;
          | field indicates if there was an error in initiating the verification.
          | If it is successful, a
          span.text-pink &nbsp;verificationInfo&nbsp;
          | is also sent in the same response, which gives some extra details about the address
          | being verified.
        pre
          span.text-white {
          br
          |   "initiateResponse"
          span.text-white : {
          br
          |     "jsonrpc"
          span.text-white :
          | "2.0"
          span.text-white ,
          br
          |     "id"
          span.text-white :
          | "null"
          span.text-white ,
          br
          |     "result"
          span.text-white : {
          br
          |       "0614765863"
          span.text-white :
          | &nbsp;"SMS|0636465236|0614765863"
          br
          span.text-white     }
          br
          span.text-white    },
          br
          |   "verficationInfo"
          span.text-white : {
          br
          |     "verificationMedium"
          span.text-white :
          | &nbsp;"SMS"
          span.text-white ,
          br
          |     "verificationStartTimestamp"
          span.text-white :
          | &nbsp;1384508760434
          span.text-white ,
          br
          |     "address"
          span.text-white :
          | &nbsp;"0614765863"
          span.text-white ,
          br
          |     "addressType"
          span.text-white :
          | &nbsp;"MOBILE"
          span.text-white ,
          br
          |     "phoneNumberOrign"
          span.text-white :
          | &nbsp;"Netherlands"
          span.text-white ,
          br
          |     "adapterConfigId"
          span.text-white :
          | &nbsp;"786a8090-13b9-11e3-a435-00007£000001"
          span.text-white ,
          br
          |     "verified"
          span.text-white :
          | &nbsp;false
          span.text-white ,
          br
          |     "id"
          span.text-white :
          | &nbsp;"8ac66391-38d3-4076-a27fbd4bd1498"
          span.text-white ,
          br
          |     "ownerKey"
          span.text-white :
          | &nbsp;"apptestoneline"
          br
          span.text-white   }
          br
          span.text-white }
        dl
          dt.text-pink verificationStartTimestamp
          dd.
            timestamp in millis when this verification step was initiated.

          dt.text-pink adapterConfigId
          dd.
            corresponding adapter used to perform the step. This is useful when multiple
            adapters can be used to perform the step. E.g. multiple XMPP adapters.

          dt.text-pink verified
          dd.
            if the address is verified already or not.

          dt.text-pink id
          dd.
            a unique Id generated to mark this verification step. This is used in the
            Verify step explained below.
        h3.text-pink Verify
        p.
          This API validates the random verification code provided by the user. Note that,
          to be validated successfully, this API has to be triggered before the
          sessionTimeoutInSecs field defined in the initiate step above.
        pre
          span.text-white POST&nbsp;
          | &lt;hostname&gt;
          span.text-white /products/verifyme/verify
          br
          span.text-white {
          br
          |   "id"
          span.text-white :
          | &nbsp;"&lt;identifies this verification step&gt;"
          span.text-white ,
          br
          |   "verificationCode"
          span.text-white :
          | &nbsp;"&lt;verification code send in the initiation step&gt;"
          br
          span.text-white }

      .col-md-7(ng-show='devModView.broadcast')
        h1.text-pink Broadcast API:
        p.
          This was created to add more flexibility to the old broadcast mechanism by supplying
          channel (E.g. SMS, EMAIL etc) specific adapter Ids. This is useful when a user has
          multiple adapters per channel and needs an option to pick one specific adapter.
        h3.text-pink Create a new broadcast:
        p.
          The new implementation of Broadcast can be currently be done in the following ways:
        ul
          li Collection of numbers
          li Collection of phonebook references
            ul
              li ContactInfo references
              li Contact references
          li Collection of groups
          li CSV stream
          li CSV file upload
          li Excel file upload
        h3.text-pink Broadcast to a Collection of numbers, phonebook references or groups:
        p.
          They are similar to each other with subtle differences. For collection of numbers,
          just use the “address” field. Similarly use the “contactInfoKey” field for refencing a
          phonebook contactInfo and “groupKey” field for referencing any groups.
        pre
          span.text-white POST
          | &nbsp;&lt;hostname&gt;/products/broadcastnew
          br
          span.text-white {
          br
          |   “addresses”
          span.text-white : {
          br
          |       “&lt;AdapterType&gt;”
          span.text-white : [
          br
          span.text-white           {
          | “address”
          span.text-white :
          | “&lt;email address1&gt;”
          span.text-white }
          br
          span.text-white           {
          | “address”
          span.text-white :
          | “&lt;email address2&gt;”
          span.text-white }
          br
          span.text-white        ]
          br
          span.text-white    },
          br
          |    “adapterList”
          span.text-white : {
          br
          |        "&lt;AdapterType&gt;”
          span.text-white :
          | “&lt;calling adapterId&gt;”
          br
          span.text-white    },
          br
          |    “senderName”
          span.text-white :
          | “&lt;senderName (used for all but CALL channel)&gt;”
          span.text-white ,
          br
          |    “message”
          span.text-white :
          | “Test message”
          span.text-white ,
          br
          |    “audio”
          span.text-white :
          | “http://autioURL.wav”
          span.text-white ,
          br
          |    “retryMethod”
          span.text-white :
          | “AUTO|MANUAL”
          span.text-white ,
          br
          |    “retryLimit”
          span.text-white :
          | &lt;retryLimit&gt;
          span.text-white ,
          br
          |    “broadcastName”
          span.text-white :
          | “&lt;Custom name to describe this broadcast&gt;”
          span.text-white ,
          br
          |    “emailSubject”
          span.text-white :
          | “&lt;email subject (used only for EMAIL channel)&gt;”
          br
          span.text-white }
        p where
        dl
          dt.text-pink AdapterType:
          dd.
            [SMS | CALL | EMAIL | XMPP | FACEBOOK | TWITTER]

          dt.text-pink Mandatory
          dd.
            field which explicilty describes which channel is used to broadcast the message.

          dt.text-pink addresses
          dd
            | Mandatory field which describes all the address to which the message must be
            | broadcasted. At Least one of the fields:
            span.text-pink &nbsp;address, contactInfoKey or groupKey&nbsp;
            | must exist per channel. Only one broadcast message is sent however if the same
            | address is found in multiple fields, then broadcast is done to only one.

          dt.text-pink adapterList
          dd.
            Optional field which gives an option to explicitly specifies which adapter to use
            for a particular channel. If not adapter is specified a default adapter that belongs
            to the currently logged in user is picked.

          dt.text-pink retryMethod (Manual)
          dd.
            [Auto|Manual] is used to indicate the method used when any broadcast send action
            (not delivery!) fails.

          dt.text-pink retryLimit(5)
          dd.
            is used to limit the number of auto-retries. This is not applicable if Manual
            RetryMethod is used.

          dt.text-pink message(“null”)
          dd.
            Simple text (or URL to a question (which can be used for allowing users to reply
            on the message)) message that has to be broadcasted.

          dt.text-pink audio(“null”)
          dd.
            (Specific to Voice only) Simple audio URL to a wav file (URL should end with
            “wav”) used to supercede the message text when performing a broadcast to text as
            well as voice mediums (SMS and CALL) in one call. If this is found to be null or
            not ending with “wav”, then the voice channel would speak out the message text.

          dt.text-pink broadcastName(“null”)
          dd.
            Custom name to describe this broadcast.

          dt.text-pink emailSubject(“null”)
          dd.
            Email subject (used only for EMAIL channel.

          dt.text-pink senderName(“null”)
          dd.
            Specific senderName used with all mediums except Call. Please be aware that for
            an SMS, defining a senderName will obviously remove the possibility to reply to
            a message.
        h3.text-pink Optional query parameters:
        dl
          dt.text-pink isPersisted(true)
          dd.
            [true|false] Flag to confirm if this broadcasting has to be persisted. If
            its not persisted options to resent/retry the broadcast would not be possible.
        h3.text-pink CSV stream:
        pre
          span.text-white POST
          | &nbsp;&lt;hostname&gt;
          span.text-white /products/broadcastnew/stream
          br
          span.text-white {
          br
          |    "csvStream"
          span.text-white :
          | "&lt;CSV stream input&gt;"
          span.text-white ,
          br
          |    "addresses"
          span.text-white : {
          br
          |        "&lt;AdapterType&gt;"
          span.text-white : [
          br
          span.text-white            {
          br
          |                "address"
          span.text-white :
          | "&lt;telephone number&gt;"
          span.text-white ,
          br
          |                "contactInfoKey"
          span.text-white :
          | &lt;contactInfoKey&gt;
          span.text-white ,
          br
          |                "contactKey"
          span.text-white :
          | &lt;contactKey&gt;
          span.text-white ,
          br
          |                "groupKey"
          span.text-white :
          | &lt;groupKey&gt;
          br
          span.text-white            }
          br
          span.text-white        ]
          br
          span.text-white    },
          br
          |    "adapterList"
          span.text-white : {
          br
          |        "&lt;AdapterType&gt;"
          span.text-white :
          | "&lt;adapterId&gt;"
          br
          span.text-white    },
          br
          |    "senderName"
          span.text-white :
          | "&lt;senderName (used for all but CALL channel)&gt;"
          span.text-white ,
          br
          |    "message"
          span.text-white :
          | "Test message"
          span.text-white ,
          br
          |    "retryMethod"
          span.text-white :
          | "AUTO|MANUAL"
          span.text-white ,
          br
          |    "retryLimit"
          span.text-white :
          | &lt;retryLimit&gt;
          span.text-white ,
          br
          |    "broadcastName"
          span.text-white :
          | "&lt;Custom name to describe this broadcast&gt;"
          span.text-white ,
          br
          |    "emailSubject"
          span.text-white :
          | "&lt;email subject (used only for EMAIL channel)&gt;
          br
          span.text-white }
        p where,
        dl
          dt.text-pink csvStream
          dd.
            Formated string of CSV format.
        h3.text-pink Query parameters (default value used in case of null in brackets):
        dl
          dt.text-pink isPersisted (true)
          dd.
            should this broadcast request be persisted in memory.

          dt.text-pink textQualifier(“\"")
          dd.
            default identifier to parse out the value corresponding to a column. E.g.
            Address: $Coolhaven, Rotterdam$, where Address is the column and Coolhaven,Rotterdam
            is the value, the “$” is the text qualifier.

          dt.text-pink columnDelimiter(",")
          dd.
            default end of a column. Usually all CSV fields have "," (comma) as the
            column delimiter.

          dt.text-pink lineDelimiter("\n")
          dd.
            default end of a row/line in csv.

          dt.text-pink phoneHeader("mobile")
          dd.
            is used to indicate the column to be parsed to lookup for the phonenumber in
            the csvStream.

          dt.text-pink emailHeader("email")
          dd.
            is used to indicate the column to be parsed to lookup for the email address
            in the csvStream.

          dt.text-pink xmppHeader("xmpp")
          dd.
            is used to indicate the column to be parsed to lookup for the xmpp address
            in the csvStream.

          dt.text-pink facebookHeader("facebook")
          dd.
            is used to indicate the column to be parsed to lookup for the facebook id in
            the csvStream.

          dt.text-pink twitterHeader("twitter")
          dd.
            is used to indicate the column to be parsed to lookup for the twitter id in
            the csvStream.
        h3.text-pink CSV Upload:
        pre
          span.text-white POST
          | &nbsp;&lt;hostname&gt;
          span.text-white /products/broadcastnew/csv/&lt;filename&gt;
          br
          span.text-white {
          br
          |    "addresses"
          span.text-white : {
          br
          |        "SMS"
          span.text-white : [
          br
          span.text-white            {
          br
          |                "address"
          span.text-white :
          | "&lt;Mobile number&gt;"
          span.text-white ,
          br
          |                "contactInfoKey"
          span.text-white :
          | &lt;contactInfoKey&gt;
          span.text-white ,
          br
          |                "contactKey"
          span.text-white :
          | &lt;contactKey&gt;
          span.text-white ,
          br
          |                "groupKey"
          span.text-white :
          | &lt;groupKey&gt;
          br
          span.text-white            }
          br
          span.text-white        ],
          br
          |        "EMAIL"
          span.text-white : [
          br
          span.text-white            {
          br
          |                "address"
          span.text-white :
          | "&lt;email address1&gt;"
          br
          |                "contactInfoKey"
          span.text-white :
          | &lt;contactInfoKey&gt;
          span.text-white ,
          br
          |                "contactKey"
          span.text-white :
          | &lt;contactKey&gt;
          span.text-white ,
          br
          |                "groupKey"
          span.text-white :
          | &lt;groupKey&gt;
          br
          span.text-white            },
          br
          span.text-white            {
          br
          |                "address"
          span.text-white :
          | "&lt;email address2&gt;"
          br
          |                "contactInfoKey"
          span.text-white :
          | &lt;contactInfoKey&gt;
          span.text-white ,
          br
          |                "contactKey"
          span.text-white :
          | &lt;contactKey>
          span.text-white ,
          br
          |                "groupKey"
          span.text-white :
          | &lt;groupKey>
          br
          span.text-white            }
          br
          span.text-white        ]
          br
          span.text-white    },
          br
          |    "adapterList"
          span.text-white : {
          br
          |        "CALL"
          span.text-white :
          | "&lt;calling adapterId&gt;"
          br
          span.text-white    },
          br
          |    "senderName"
          span.text-white :
          | "&lt;senderName (used for all but CALL channel)&gt;"
          span.text-white ,
          br
          |    "message"
          span.text-white :
          | "Test message"
          span.text-white ,
          br
          |    "retryMethod"
          span.text-white :
          | "AUTO|MANUAL"
          span.text-white ,
          br
          |    "retryLimit"
          span.text-white :
          | &lt;retryLimit&gt;
          span.text-white ,
          br
          |    "broadcastName"
          span.text-white :
          | "&lt;Custom name to describe this broadcast&gt;"
          span.text-white ,
          br
          |    "emailSubject"
          span.text-white :
          | "&lt;email subject (used only for EMAIL channel)&gt;"
          br
          span.text-white }
        p All query parameters are similar to the CSV stream API.
        h3.text-pink Excel upload:
        pre
          span.text-white POST
          | &nbsp;&lt;hostname&gt;
          span.text-white /products/broadcastnew/excel/&lt;filename&gt;
          br
          span.text-white {
          br
          |    "addresses"
          span.text-white : {
          br
          |        "CALL"
          span.text-white : [
          br
          span.text-white            {
          br
          |                "address"
          span.text-white :
          | "&lt;telephone number&gt;"
          span.text-white ,
          br
          |                "contactInfoKey"
          span.text-white :
          | &lt;contactInfoKey&gt;
          span.text-white ,
          br
          |                "contactKey"
          span.text-white :
          | &lt;contactKey&gt;
          span.text-white ,
          br
          |                "groupKey"
          span.text-white :
          | &lt;groupKey&gt;
          br
          span.text-white            }
          br
          span.text-white        ],
          br
          |        "EMAIL"
          span.text-white : [
          br
          span.text-white           {
          | "address"
          span.text-white :
          | "&lt;email address1&gt;"
          span.text-white },
          br
          span.text-white           {
          | "address"
          span.text-white :
          | "&lt;email address2&gt;"
          span.text-white }
          br
          span.text-white        ]
          br
          span.text-white    },
          br
          |    "adapterList"
          span.text-white : {
          br
          |        "CALL"
          span.text-white :
          | "&lt;calling adapterId&gt;"
          br
          span.text-white    },
          br
          |    "senderName"
          span.text-white :
          | "&lt;senderName (used for all but CALL channel)&gt;"
          span.text-white ,
          br
          |    "message"
          span.text-white :
          | "Test message"
          span.text-white ,
          br
          |    "retryMethod"
          span.text-white :
          | "AUTO|MANUAL"
          span.text-white ,
          br
          |    "retryLimit"
          span.text-white :
          | &lt;retryLimit&gt;
          span.text-white ,
          br
          |    "broadcastName"
          span.text-white :
          | "&lt;Custom name to describe this broadcast"
          span.text-white ,
          br
          |    "emailSubject"
          span.text-white :
          | "&lt;email subject (used only for EMAIL channel)&gt;"
          br
          span.text-white }
        p where,
        dl
          dt.text-pink Optional Query parameters:

          dt.text-pink isPersisted (true)
          dd.
            should this broadcast request be persisted in memory.

          dt.text-pink sheetIndexExpression("0")
          dd.
            &Regex exp like "1", "1:2", "1,4" are possible] The default sheets of the excel
            sheet to parse.

          dt.text-pink rowIndexExpression("0"): <lastRow of the sheet>)
          dd.
            [Exp like 4:50 is possible] The default range of rows that has to be parsed.

          dt.text-pink phoneHeader("mobile")
          dd.
            is used to indicate the column to be parsed to lookup for the phonenumber in
            the excel file.

          dt.text-pink emailHeader("email")
          dd.
            is used to indicate the column to be parsed to lookup for the email address in
            the excel file.

          dt.text-pink xmppHeader("xmpp")
          dd.
            is used to indicate the column to be parsed to lookup for the xmpp address
            in the excel file.

          dt.text-pink facebookHeader("facebook")
          dd.
            is used to indicate the column to be parsed to lookup for the facebook id in
            the excel file.

          dt.text-pink twitterHeader("twitter")
          dd.
            is used to indicate the column to be parsed to lookup for the twitter id in
            the excel file.
        h3.text-pink Broadcast retry failed:
        p.
          This will retry all the failed broadcast that has occured in a previous attempt.
        pre
          span.text-white POST
          | &nbsp;&lt;hostname&gt;
          span.text-white /products/broadcastnew/retryfailed/&lt;broadcastId&gt;
        p where,
        dl
          dt.text-pink broadcastId
          dd.
            is the id associated with any previous broadcast, received in the response
            of a broadcast call.
        h3.text-pink Re-Broadcast:
        p.
          This will repeat a prior stored broadcast.
        pre
          span.text-white POST
          | &nbsp;&lt;hostname&gt;
          span.text-white /products/broadcastnew/resent/&lt;broadcastId&gt;
        p where,
        dl
          dt.text-pink broadcastId
          dd.
            is the id associated with any previous broadcast, received in the response
            of a broadcast call.
        h3.text-pink Fetch all the broadcasts:
        p.
          Fetches a collection of all previously broadcasted messages.
        pre
          span.text-white GET
          | &nbsp;&lt;hostname&gt;
          span.text-white /products/broadcastnew
        h3.text-pink Fetch a specific broadcast:
        p.
          Fetches a specific broadcast based on its id
        pre
          span.text-white GET
          | &nbsp;&lt;hostname&gt;
          span.text-white /products/broadcastnew/&lt;broadcastId&gt;
        h3.text-pink Delete a specific broadcast:
        p.
          Deletes a specific broadcast based on its id
        pre
          span.text-white DELETE
          | &nbsp;&lt;hostname&gt;
          span.text-white /products/broadcastnew/&lt;broadcastId&gt;
        h3.text-pink Prefix search for a contactInfo, firstName or lastName
        p.
          This API can be used to fetch all the broadcasts with a specific query string
          as the prefix of broadcast name.
        pre
          span.text-white GET
          | &nbsp;&lt;hostname&gt;/products/broadcastnew/prefixsearch/{query}
          br
          | Response:
          br
          span.text-white [
          br
          span.text-white    {
          br
          |        "id"
          span.text-white :
          | "&lt;broadcast id&gt;"
          span.text-white ,
          br
          |        "match"
          span.text-white :
          | "&lt;fieldName&gt;:// &lt;fieldValue&gt;"
          br
          span.text-white    }
          br
          span.text-white ]
        h3.text-pink Update a specific broadcast:
        p.
          Updates a specific broadcast based on its id, so that it can be used to send
          a broadcast to a new set of addresses. This will overwrite the previously created
          broadcast entity.
        pre
          span.text-white PUT
          | &nbsp;&lt;hostname&gt;
          span.text-white /products/broadcastnew/&lt;broadcastId&gt;
          br
          span.text-white {
          br
          |    broadcast_playload
          br
          span.text-white }
        h3.text-pink File upload:
        p.
          This interface, is used to upload a file into the blobstore of the app engine.
          Of course, the user has to be registered and logged in. We can create a username
          and password for testing.
        pre
          span.text-white GET
          | &nbsp;&lt;hostname&gt;
          span.text-white /blobstore/&lt;someRandomFileName&gt;?!
        p.
          This generates an HTML page with option to select a file from the local computer.
          A POST request is then performed on a google blobstore upload servlet generated path:
        pre
          span.text-white POST
          | &nbsp;&lt;hostname&gt;
          span.text-white /_ah/upload/&lt;blobstoreUploadKey&gt;
        p Example:
        pre
          | &nbsp;&lt;hostname&gt;
          span.text-white /_ah/upload/ag1hc2tmYXN0bWFya2V0chwLEhVfX0Jsb2JVcGxvYWRTZXNzaW9
        h3.text-pink Groups JSON:
        pre
          span.text-white {
          br
          |  "id"
          span.text-white :
          | 1
          span.text-white ,
          br
          |  "name"
          span.text-white :
          | "OneLine blackList group"
          span.text-white ,
          br
          |  "groupInfo"
          span.text-white : {
          br
          |    "companyName"
          span.text-white :
          | "Blacklist group for TestCompany"
          br
          span.text-white  },
          br
          |  "contactInfoIds"
          span.text-white : [
          br
          |    3
          br
          span.text-white  ]
          br
          span.text-white }
        h3.text-pink Contact JSON:
        pre
          span.text-white {
          br
          |  "contactInfoRefs"
          span.text-white : [
          br
          |      2
          span.text-white ,
          br
          |      3
          br
          span.text-white  ],
          br
          |  "lastAvailableTime"
          span.text-white :
          | 1370372753829
          span.text-white ,
          br
          |  "id"
          span.text-white :
          | 1
          span.text-white }
        h3.text-pink ContactInfo JSON:
        pre
          span.text-white {
          br
          |  "id"
          span.text-white :
          | 3
          span.text-white ,
          br
          |  "contactInfo"
          span.text-white :
          | "1234567890"
          span.text-white ,
          br
          |  "firstName"
          span.text-white :
          | "Test"
          span.text-white ,
          br
          |  "lastName"
          span.text-white :
          | "Customer"
          span.text-white ,
          br
          |  "contactInfoTag"
          span.text-white :
          | "Name"|"Phone"|"Voip"|"Email"|"Fax"|"Address"|"DOB"|PURCHASED_NUMBER"
          | |"Special"|"Other"
          span.text-white ,
          br
          |  "label"
          span.text-white :
          | "Office"
          span.text-white ,
          br
          |  "contactKey"
          span.text-white :
          | 1
          span.text-white ,
          br
          |  "groupKeys"
          span.text-white :
          | [1, 2, 3]
          br
          span.text-white }
        p.
          Each ContactInfo can belong to one Contact and different Groups.
        h3.text-pink Broadcast Response JSON:
        pre
          span.text-white {
          br
          |  "broadcast"
          span.text-white : {
          br
          |      "addresses"
          span.text-white : {
          br
          |          "EMAIL"
          span.text-white : [
          br
          span.text-white              {
          br
          |                  "address"
          span.text-white :
          | "sshetty@ask-cs.com"
          span.text-white ,
          br
          |                  "responseMessage"
          span.text-white :
          | "No adapters of Type: EMAIL found for user: root"
          span.text-white ,
          br
          |                  "contactName"
          span.text-white :
          | "John Dunbar"
          br
          span.text-white              }
          br
          span.text-white          ]
          br
          span.text-white      },
          br
          |      "adapterList"
          span.text-white : {
          br
          |          "CALL"
          span.text-white :
          | "151b05e0-25f3-11e3-a6c7-00007f000001"
          br
          span.text-white      },
          br
          |      "senderName"
          span.text-white :
          | "Broadcast message"
          span.text-white ,
          br
          |      "emailSubject"
          span.text-white :
          | "Test message"
          span.text-white ,
          br
          |      "message"
          span.text-white :
          | "This is a test message"
          span.text-white ,
          br
          |      "broadcastName"
          span.text-white :
          | "This is my broadcast"
          span.text-white ,
          br
          |      "timeStamp"
          span.text-white :
          | 1383935826888
          span.text-white ,
          br
          |      "retryCount"
          span.text-white :
          | 5
          span.text-white ,
          br
          |      "retryLimit"
          span.text-white :
          | 5
          span.text-white ,
          br
          |      "retryMethod"
          span.text-white :
          | "AUTO"
          br
          span.text-white  },
          br
          |  "id"
          span.text-white :
          | 5910974510923776
          span.text-white ,
          br
          |  "retryInfos"
          span.text-white : {
          br
          |      "EMAIL"
          span.text-white : [
          br
          span.text-white          {
          br
          |              "address"
          span.text-white :
          | "sshetty@ask-cs.com"
          span.text-white ,
          br
          |              "responseMessage"
          span.text-white :
          | "No adapters of Type: EMAIL found for user: root"
          span.text-white ,
          br
          |              "contactName"
          span.text-white :
          | "John Dunbar"
          br
          span.text-white          },
          br
          span.text-white          {
          br
          |              "address"
          span.text-white :
          | "sshetty@ask-cs.com"
          span.text-white ,
          br
          |              "responseMessage"
          span.text-white :
          | "No adapters of Type: EMAIL found for user: root"
          span.text-white ,
          br
          |              "contactName"
          span.text-white :
          | "John Dunbar"
          br
          span.text-white          },
          br
          span.text-white          {
          br
          |              "address"
          span.text-white :
          | "sshetty@ask-cs.com"
          span.text-white ,
          br
          |              "responseMessage"
          span.text-white :
          | "No adapters of Type: EMAIL found for user: root"
          span.text-white ,
          br
          |              "contactName"
          span.text-white :
          | "John Dunbar"
          br
          span.text-white          },
          br
          span.text-white          {
          br
          |              "address"
          span.text-white :
          | "sshetty@ask-cs.com"
          span.text-white ,
          br
          |              "responseMessage"
          span.text-white :
          | "No adapters of Type: EMAIL found for user: root"
          span.text-white ,
          br
          |              "contactName"
          span.text-white :
          | "John Dunbar"
          br
          span.text-white          },
          br
          span.text-white          {
          br
          |              "address"
          span.text-white :
          | "sshetty@ask-cs.com"
          span.text-white ,
          br
          |              "responseMessage"
          span.text-white :
          | "No adapters of Type: EMAIL found for user: root"
          span.text-white ,
          br
          |              "contactName"
          span.text-white :
          | "John Dunbar"
          br
          span.text-white          }
          br
          span.text-white      ]
          br
          span.text-white  }
          br
          span.text-white }

      .col-md-7(ng-show='devModView.tracking')
        h1.text-pink Number tracking
        p.
          no content

      .col-md-7(ng-show='devModView.click')
        h1.text-pink Click2Call
        h3.text-pink Initiate a call
        p.
          To initiate an outbound call, perform the following request. This will ensure that
          your account and the Question (accessed via the URL) is setup properly. The blue
          fields are mandatory.
        pre
          span.text-white POST
          | &nbsp;http://ask-charlotte.appspot.com/rpc
          br
          span.text-white {
          br
          |    "id"
          span.text-white :
          | 1
          span.text-white ,
          br
          |    "method"
          span.text-white :
          | "outboundCall"
          span.text-white ,
          br
          |    "params"
          span.text-white : {
          br
          |        "publicKey"
          span.text-white :
          span.text-blue "&lt;publicKey&gt;"
          span.text-white ,
          br
          |        "privateKey"
          span.text-white :
          span.text-blue "&lt;privateKey&gt;"
          span.text-white ,
          br
          |        "adapterID"
          span.text-white :
          span.text-blue "&lt;adapterID&gt;"
          span.text-white ,
          br
          |        "address"
          span.text-white :
          span.text-blue "&lt;address&gt;"
          span.text-white ,
          br
          |        "url"
          span.text-white :
          span.text-blue "&lt;URL to fetch the Question from&gt;"
          span.text-white ,
          br
          |        "senderName"
          span.text-white :
          | "&lt;sender Name&gt;"
          br
          span.text-white    }
          br
          span.text-white }
        p where,
        dl
          dt.text-pink publicKey, privateKey and adapterID
          dd.
            IDs linked to the registered account.

          dt.text-pink address
          dd.
            Address to which an outboundCall is to be performed. E.g. phone-number in case
            of SMS or PhoneCall, email address in case of Email or XMPP etc.

          dt.text-pink url
          dd.
            The URL to fetch the Question from. The ASK-Fast Server performs a GET request
            on this URL and expects a response in the Question format.
        p.
          To initiate outBound broadcast calls use the following API:
        pre
          span.text-white POST
          | &nbsp;http://ask-charlotte.appspot.com/rpc
          br
          span.text-white {
          br
          |    "method"
          span.text-white :
          | "outboundCallWithMap"
          span.text-white ,
          br
          |    "params"
          span.text-white : {
          br
          |        "adapterID"
          span.text-white :
          | "&lt;adapterId&gt;"
          span.text-white ,
          br
          |        "addressMap"
          span.text-white : {
          br
          |            "&lt;address1&gt;"
          span.text-white :
          | "Alice"
          br
          span.text-white        },
          br
          |        "url"
          span.text-white :
          | "&lt;URL to fetch the Question from&gt;"
          span.text-white ,
          br
          |        "publicKey"
          span.text-white :
          | "&lt;publicKey&gt;"
          span.text-white ,
          br
          |        "privateKey"
          span.text-white :
          | "&lt;privateKey&gt;"
          span.text-white ,
          br
          |        "senderName"
          span.text-white :
          | "&lt;sender Name&gt;"
          br
          span.text-white    }
          br
          span.text-white }
        h3.text-pink Advanced: Trigger events
        p.
          The following event callbacks can be used to capture any events in the
          communication channel.
        pre
          | "event_callbacks"
          span.text-white : [
          br
          span.text-white  {
          br
          |    "event"
          span.text-white :
          | "[answered|timeout|exception|hangup]"
          span.text-white ,
          br
          |    "callback"
          span.text-white :
          | "&lt;url&gt;"
          br
          span.text-white  }
          br
          span.text-white ]
        p where,
        dl
          dt.text-pink answered
          dd.
            used to trigger a callback when a phone call is answered by the callee.

          dt.text-pink timeout
          dd.
            when a phone call is missed by the callee.

          dt.text-pink exception
          dd.
            when a phone call is not triggered for miscellaneous reasons.

          dt.text-pink hangup
          dd.
            when the callee hangs up a phone call.
        p.
          The POST request initiated on the callback url carries the following payload:
        pre
          span.text-white {
          br
          |  "responder"
          span.text-white :
          | "&lt;id url&gt;"
          span.text-white ,
          br
          |  "question_id"
          span.text-white :
          | &lt;originating question&gt;
          span.text-white ,
          br
          |  "event"
          span.text-white :
          | "&lt;originating event&gt;"
          span.text-white ,
          br
          |  "extras"
          span.text-white : {
          br
          |      &lt;optional/additional information about this event&gt;
          br
          span.text-white  },
          br
          |  "message"
          span.text-white :
          | "&lt;string describing the event, error message&gt;"
          br
          span.text-white }
        p where,
        p.
          extras, has a key, value pair of any additional information related to this event. E.g.
        pre
          | "extras"
          span.text-white : {
          br
          |  "startTime"
          span.text-white :
          | 1382623574000
          span.text-white ,
          br
          |  "releaseTime"
          span.text-white :
          | 1382624584000
          span.text-white ,
          br
          |  "answerTime"
          span.text-white :
          | 1382623584000
          br
          span.text-white }
        p.
          carries the startTime (timestamp at which the phone call started), answerTime
          (timestamp at which the phone call was answered) and releaseTime (timestamp at
          which the phone call was hang up).


article#sub-documents(ng-show='subView.documents')
  .container-fluid.container-content
    .row
      .col-md-12.content-holder
        .row.input-emphasize
          form.form-inline(role='form')
            .col-lg-12
              .input-group
                input.form-control(type='text',
                placeholder='Search in API')
                span.input-group-btn
                  button.btn.btn-default(type='button',
                  style='height:34px') Search!
    .row
      .col-md-12
        h1.text-pink Start-up guide for developers
    .row
      .col-md-6
        h3 Introduction
        ul
          li
            a(href='') How do we define a dilaog?
          li
            a(href='') How is a dialog structured?
          li
            a(href='') Start a dialog
      .col-md-6
        h3 Question types
        ul
          li
            a(href='') Open Questions
          li
            a(href='') Closed Questions
          li
            a(href='') Comment type Questions